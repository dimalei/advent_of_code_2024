import re


class Vector2:
    def __init__(self, x, y):
        self.x = int(x)
        self.y = int(y)

    def __add__(self, other: object):
        if not isinstance(other, Vector2):
            return self
        return Vector2(self.x + other.x, self.y + other.y)

    def __mul__(self, other: object):
        if isinstance(other, int):
            return Vector2(self.x * other, self.y * other)
        if isinstance(other, 'Vector2'):
            return Vector2(self.x * other.x, self.y * other.y)
        return self


class Ray2:
    def __init__(self, start: Vector2, direction: Vector2):
        self.s = start
        self.d = direction

    def get_intersection(self, other: 'Ray2') -> Vector2:
        # this method is generated by chattyboi
        # Compute determinant
        det = other.d.x * self.d.y - other.d.y * self.d.x

        # Check if rays are parallel (det is zero)
        if abs(det) < 1e-10:
            return None  # No intersection (rays are parallel)

        # Solve for parameters u and v (distances along the ray directions)
        dx = other.s.x - self.s.x
        dy = other.s.y - self.s.y

        u = (dy * other.d.x - dx * other.d.y) / det
        v = (dy * self.d.x - dx * self.d.y) / det

        # Check if intersection is "in front" of the start of both rays
        if u >= 0 and v >= 0:
            # Intersection point: self.s + u * self.d
            intersection_x = self.s.x + u * self.d.x
            intersection_y = self.s.y + u * self.d.y
            return Vector2(intersection_x, intersection_y)

        return None  # No valid intersection (lies behind one or both rays)


class Claw_Machine:
    def __init__(self, button_a: Vector2, button_b: Vector2, prize: Vector2):
        self.button_a = button_a
        self.button_b = button_b
        self.prize = prize
        self.min_cost = self.compute_min_cost()

    def compute_min_cost(self):
        cost_AB = 0
        cost_BA = 0

        intersection_AB = Ray2(Vector2(0, 0), self.button_a).get_intersection(
            Ray2(self.prize, self.button_b * -1))

        intersection_BA = Ray2(Vector2(0, 0), self.button_b).get_intersection(
            Ray2(self.prize, self.button_a * -1))

        if intersection_AB != None and intersection_AB.x % self.button_a.x == 0:
            amount_a = intersection_AB.x // self.button_a.x
            amount_b = (self.prize.x - intersection_AB.x) // self.button_b.x

            cost_AB = self.get_cost(amount_a, amount_b)

        if intersection_BA != None and intersection_BA.x % self.button_b.x == 0:
            amount_b = intersection_BA.x // self.button_b.x
            amount_a = (self.prize.x - intersection_BA.x) // self.button_a.x

            cost_BA = self.get_cost(amount_a, amount_b)

        if cost_AB > 0 and cost_AB <= cost_BA:
            return cost_AB

        if cost_BA > 0 and cost_BA <= cost_AB:
            return cost_BA

        return 0

    def get_cost(self, amount_a: int, amount_b: int):
        return amount_a * 3 + amount_b

    def __str__(self):
        return f"prize: {self.prize} A:{self.button_a} B:{self.button_b}"

    def add_10_pow_n(self, n: int):
        self.prize += Vector2(10**n, 10**n)
        self.min_cost = self.compute_min_cost()


def get_input(file_name="test_input.txt") -> list:
    with open(file_name, "r") as file:
        out = []
        for row in file:
            if "A" in row:
                a, b = re.findall('\d+', row.strip())
                A = Vector2(a, b)
            if "B" in row:
                a, b = re.findall('\d+', row.strip())
                B = Vector2(a, b)
            if "P" in row:
                a, b = re.findall('\d+', row.strip())
                P = Vector2(a, b)
                out.append(Claw_Machine(A, B, P))
        return out


if __name__ == "__main__":
    # claw_machines = get_input()
    claw_machines = get_input("input.txt")

    # for i, m in enumerate(claw_machines):
    #     print(f"machine {i+1:03}: {m.min_cost}")
    print(f"total sum pt1: {sum([m.min_cost for m in claw_machines])}")

    claw_machines_pt2 = []

    for cm in claw_machines:
        cm.add_10_pow_n(13)

    # for i, m in enumerate(claw_machines):
    #     print(f"machine {i+1:03}: {m.min_cost}")
    print(f"total sum pt2: {sum([m.min_cost for m in claw_machines])}")
